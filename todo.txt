ftp:
    RUN apt-get install -y vsftpd
    ENV FTP_CONFIG /etc/vsftpd.conf

mpd:
    RUN apt-get install mpd -y 
    ENV MPD_CONFIG /etc/mpd.conf

redis:
    RUN apt-get install redis-server

    ENV REDIS_CONFIG /etc/redis/redis.conf
    ENV REDIS_LOG /host/var/log/redis/redis.log
    ENV REDIS_DATA /host/var/lib/redis

    RUN sed -i "s,^\(daemonize\s*\).*$,\1no," $REDIS_CONFIG
    RUN sed -i "s,^\(logfile\s*\).*$,\1$REDIS_LOG," $REDIS_CONFIG
    RUN sed -i "s,^\(dir\s*\).*$,\1$REDIS_DATA," $REDIS_CONFIG
    
shipyard:
    RUN cd /opt && \
        git clone https://github.com/shipyard/shipyard.git

    RUN curl https://raw.github.com/pypa/pip/master/contrib/get-pip.py | python

    RUN cd /opt/shipyard && \
        pip install -r requirements.txt || true
        
    ENV SHIPYARD_CONFIG /opt/shipyard/shipyard/settings.py
    ENV SHIPYARD_DB /host/var/lib/shipyard/shipyard.db

    RUN sed -i "s;^\(\s*'NAME':\s*\).*$;\1'$SHIPYARD_DB',;" $SHIPYARD_CONFIG
    
    mkdir -p `dirname $SHIPYARD_DB`
    touch $SHIPYARD_DB

    /opt/shipyard/manage.py syncdb --noinput
    /opt/shipyard/manage.py migrate
    /opt/shipyard/manage.py update_admin_user --username=admin --password=kreeft
    /opt/shipyard/manage.py runserver 0.0.0.0:8000
    
minidlna:
    RUN apt-get install -y gettext libavutil-dev libavcodec-dev libavformat-dev libjpeg-dev libsqlite3-dev libexif-dev libid3tag0-dev libogg-dev libvorbis-dev libFLAC-dev

    ENV MINIDLNA_VERSION 1.1.3
    ENV MINIDLNA_CONFIG /host/etc/minidlna.conf
    ENV MINIDLNA_LOG /host/var/log/minidlna.log
    ENV MINIDLNA_DATA /host/var/lib/minidlna

    RUN cd /opt && \
        wget http://downloads.sourceforge.net/project/minidlna/minidlna/$MINIDLNA_VERSION/minidlna-$MINIDLNA_VERSION.tar.gz && \
        tar xzf minidlna-$MINIDLNA_VERSION.tar.gz
    RUN cd /opt/minidlna-$MINIDLNA_VERSION && \
        ./configure && \
        make && \
        make install
            
    mkdir -p $MINIDLNA_DATA
    /usr/local/sbin/minidlnad -d -f $MINIDLNA_CONFIG >> $MINIDLNA_LOG
    
    /opt/docker/bin/run -t $CONTAINER "
        -p 8200:8200
        -p 8200:8200/udp
        -v /opt/docker/images/$CONTAINER/fs/bin:/host/bin
        -v /opt/docker/images/$CONTAINER/fs/var:/host/var
        -v /opt/docker/images/$CONTAINER/fs/etc:/host/etc
        -v /media/neptune/Music:/host/srv/audio
        -v /media/helios/Photographs:/host/srv/pictures
        -v /media/neptune/Video:/host/srv/video" $1
        # -p 1900:1900/udp
    /opt/docker/bin/run -t $CONTAINER "
        -v /opt/docker/images/$CONTAINER/fs/bin:/host/bin
        -v /opt/docker/images/$CONTAINER/fs/var:/host/var
        -v /opt/docker/images/$CONTAINER/fs/etc:/host/etc
        -v /media/neptune/Music:/host/srv/audio
        -v /media/helios/Photographs:/host/srv/pictures
        -v /media/neptune/Video:/host/srv/video" \
        -d -n=false \  
        -lxc-conf="lxc.network.type = veth" \
        -lxc-conf="lxc.network.flags = up" \
        -lxc-conf="lxc.network.link = eth0" \
        -lxc-conf="lxc.network.ipv4 = 192.168.1.151" \
        -lxc-conf="lxc.network.ipv4.gateway=192.168.1.1" $1
    
shipyard:
    RUN apt-get install -y multiarch-support binutils-multiarch
    RUN dpkg --add-architecture i386
    RUN apt-get update
    RUN apt-get install -y libX11-6:i386 libgdk-pixbuf2.0-0:i386 \
                           libgtk2.0-0:i386 libsqlite3-0:i386

    #RUN apt-get install -y ia32-libs
    #RUN apt-get install -y ia32-libs-gtk

syncovery:
    RUN cd /opt && \
        wget http://www.superflexible.com/SuperFlexibleLinux.tar.gz && \
        tar xzf SuperFlexibleLinux.tar.gz && \
        rm SuperFlexibleLinux.tar.gz
    RUN chmod +x /opt/SuperFlexibleSynchronizer

    RUN apt-get install -y openssh-server net-tools
    /opt/SuperFlexibleSynchronizer
    
webmo:
    RUN apt-get install -y csh

    ADD gaussian.tgz /opt

    ENV GAUSS_EXEDIR /opt/g09
    RUN cd $GAUSS_EXEDIR && \
        ./bsd/install

    ADD webmo.tgz /opt
    RUN mv /opt/WebMO.install /opt/webmo
    RUN ln -s /host/etc/webmo/globals.int /opt/webmo/cgi-bin/interfaces/
    RUN ln -s /host/etc/webmo/gaussian.int /opt/webmo/cgi-bin/interfaces/
    RUN ln -s /opt/webmo/scripts/secure.pl /opt/webmo/cgi-bin/
    RUN sed -i 's,$webserverProtocol://${webserver},,' /opt/webmo/cgi-bin/redirect.cgi
    RUN usermod -G root www-data
    
pyopenssl:
    install gcc libpython-dev libffi-dev libssl-dev
    pip install git+git://github.com/pyca/pyopenssl.git

misc:
    /opt/init --skip-runit sleep infinity

    ARGS="-v /root/.config/pulse:/root/.config/pulse"
    ARGS="-v /tmp/.X11-unix:/tmp/.X11-unix -v /dev/shm:/dev/shm -v /run/user/${UID}/pulse:/run/user/${UID}/pulse"